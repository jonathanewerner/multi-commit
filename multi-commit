#!/usr/bin/env python3
from display import *
from Cmd import Cmd
from parse import parse
from DotDict import DotDict
import subprocess, re, os, sys
from subprocess import Popen, PIPE, STDOUT
from tempfile import SpooledTemporaryFile as tempfile

def stage_hunks(diffs, commits, cmd):

    def make_commit_item(fname, hunk_nr):
        return {'filename': fname, 'hunk_nr': hunk_nr}

    diffs = map(DotDict, diffs)
    for f in diffs:
        for hunk_nr, hunk in enumerate(f.hunks):
            os.system('clear')
            print_caption1(f.filename)
            print_hunk(hunk)
            item = commit_item(f.filename, hunk_nr)

            print_line_bottom()
            print_commits()
            while 1:
                i = prompt()
                if len(i)==0: break

                if i.isdigit() and len(i) == 1:
                    number = int(i)
                    if number <= len(commits):
                        commits[number-1]['hunks'].append(item)
                        break
                    else:
                        continue
                else:
                    if not i: continue
                    commits.append({'msg': i})
                    commits[-1]['hunks'] = [item]
                    break

def show_summary(diffs):
    os.system('clear')
    print_caption1('Commit Summary')
    for n, commit in enumerate(commits):
        print_commit_caption(n, commit)
        for hunk_obj in commit['hunks']:
            fname = hunk_obj['filename']
            hunk_nr = hunk_obj['hunk_nr']
            hunk = get_hunks(diffs, fname)[hunk_nr]
            print_hunk(hunk, fname)

def format_patch(header, hunk):
    return '\n'.join(header) + '\n' + '\n'.join(hunk)

def create_patches(diffs, commit):
    patches = []
    for hunk_obj in commit['hunks']:
        fname = hunk_obj['filename']
        hunk_nr = hunk_obj['hunk_nr']
        hunk = get_hunks(diffs, fname)[hunk_nr]
        header = get_header(diffs, fname)
        patch = format_patch(header, hunk)
        patches.append(patch)

    return patches

def get_header(diffs, fname):
    return [f for f in diffs if f['filename'] == fname][0]['header']

def get_hunks(diffs, fname):
    return [f for f in diffs if f['filename'] == fname][0]['hunks']

def main():
    repo_dir='/home/jwerner/dev/multi-commit'

    diff = subprocess.check_output('git diff -U1', shell=True, cwd=repo_dir)
    diff_string = diff.decode('utf-8')

    diffs = parse(diff_string)
    interact(diffs)
    show_summary(diffs)

    print_line_bottom()
    if prompt('Commit everything? (y/_)') != 'y': return
    for commit in commits:
        patches = create_patches(diffs, commit)
        print("Committing '{}'".format(commit['msg']))
        for patch in patches:
            f = tempfile()
            f.write(bytes(patch, 'utf-8') + b'\n'); f.seek(0)
            stdout = Popen('git apply -v --cached', shell=True, stdout=PIPE, stdin=f, stderr=STDOUT, cwd=repo_dir).stdout.read()
            print(stdout.decode('utf-8'))

        stdout = subprocess.check_output("git commit -m '{}'".format(commit['msg']), shell=True, cwd=repo_dir)
        print(stdout.decode('utf-8'))



main()
