#!/usr/bin/env python3
from display import *
from Cmd import Cmd
from parse import parse
from DotDict import DotDict
import subprocess, re, os, sys
from subprocess import Popen, PIPE, STDOUT
from tempfile import SpooledTemporaryFile as tempfile
import readline


def stage_hunks(diffs, commits, cmd):

    def make_commit_item(fname, hunk_nr):
        return {'filename': fname, 'hunk_nr': hunk_nr}

    diffs = map(DotDict, diffs)
    for f in diffs:
        for hunk_nr, hunk in enumerate(f.hunks):
            cmd.e(f.filename)
            os.system('clear')
            print_caption1(f.filename)
            print_hunk(hunk)
            print_line()
            print_commits(commits)

            item = make_commit_item(f.filename, hunk_nr)
            while 1:
                i = prompt('Enter commit short message or number (enter to skip hunk, [q]uit):', 'Prefixes: feat, fix, look, docs, style, refactor, test, chore')
                if len(i) == 0: break
                if i == 'q': sys.exit()

                if i.isdigit():
                    number = int(i)
                    if number <= len(commits):
                        commits[number-1]['hunks'].append(item)
                        break
                    else:
                        continue
                else:
                    if not i: continue
                    i2 = multiline_prompt('\nEnter commit description (enter to skip, empty line to finish):')
                    commits.append({'msg': [i] if len(i2) == 0 else [i, i2]})
                    commits[-1]['hunks'] = [item]
                    break


def show_summary(diffs, commits):
    os.system('clear')
    print_caption1('Commit Summary')
    for n, commit in enumerate(commits):
        print_commit_caption(n, commit)
        for hunk_obj in commit['hunks']:
            fname = hunk_obj['filename']
            hunk_nr = hunk_obj['hunk_nr']
            hunk = get_hunks(diffs, fname)[hunk_nr]
            print_hunk(hunk, fname)

def replace_quotes(string):
    string_ = string.replace('"', '\\"')
    string__ = string_.replace("'", "\\'")
    return string__

def commit_all(diffs, commits, repo_dir):
    print_line()
    while 1:
        i = prompt('Commit everything? (y/n)')
        if i == 'y':
            break
        if i == 'n': sys.exit()

    for commit in commits:
        patches = create_patches(diffs, commit)
        print("Committing '{}'".format(commit['msg'][0]))
        for patch in patches:
            f = tempfile()
            f.write(bytes(patch, 'utf-8') + b'\n'); f.seek(0)
            stdout = Popen('git apply -v --cached', shell=True, stdout=PIPE, stdin=f, stderr=STDOUT, cwd=repo_dir).stdout.read()
            # print(stdout.decode('utf-8'))

        if len(commit['msg']) == 1:
            stdout = subprocess.check_output('git commit -m "{}"'.format(replace_quotes(commit['msg'][0])), shell=True, cwd=repo_dir)
        else:
            stdout = subprocess.check_output('git commit -m "{}" -m "{}"'.format(*map(replace_quotes,commit['msg'])), shell=True, cwd=repo_dir)

        # print(stdout.decode('utf-8'))


def get_hunks(diffs, fname):
    return [f for f in diffs if f['filename'] == fname][0]['hunks']


def create_patches(diffs, commit):

    def format_patch(header, hunk):
        return '\n'.join(header) + '\n' + '\n'.join(hunk)

    def get_header(diffs, fname):
        return [f for f in diffs if f['filename'] == fname][0]['header']


    patches = []
    for hunk_obj in commit['hunks']:
        fname = hunk_obj['filename']
        hunk_nr = hunk_obj['hunk_nr']
        hunk = get_hunks(diffs, fname)[hunk_nr]
        header = get_header(diffs, fname)
        patch = format_patch(header, hunk)
        patches.append(patch)

    return patches


def check_untracked_files(cmd):
    print_caption1('Untracked Files')
    result = cmd.untracked_files()
    print(result)

    if result:
        i = prompt('there are untracked files. '
            'add --intent-to-add all? (y/_)')
        if i == 'y': cmd.add_intent_to_add()
        if i == 'q': sys.exit()

def check_log_statements(cmd):

    result = cmd.find_console_logs()
    if result:
        print_caption1('Log Statements')
        cmd.show_console_logs()

        i = prompt('there are log statements. '
            'remove them all? (y/q/_)')
        if i == 'y': cmd.remove_console_logs()
        if i == 'q': sys.exit()

def main():
    repo_dir = os.getcwd()
    commits = []
    cmd = Cmd(repo_dir)

    check_untracked_files(cmd)
    check_log_statements(cmd)

    diff = cmd.check_output('git diff -U1')

    diffs = parse(diff)
    if diffs:
        stage_hunks(diffs, commits, cmd)
        show_summary(diffs, commits)
        commit_all(diffs, commits, repo_dir)

main()
